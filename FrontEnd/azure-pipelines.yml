trigger:
- main

pr:
- main

pool:
  vmImage: ubuntu-18.04

stages:
  - stage: analyze
    displayName: Analyze
    jobs:
      - job: analyze
        steps:
          - task: Npm@1
            displayName: Install Dependencies
            inputs:
              workingDir: FrontEnd/frontEnd/
              command: install
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: sonar-srv-0
              scannerMode: CLI
              organization: p2the-pretzelmen
              configFile: FrontEnd/frontEnd/sonar-project.properties
          - task: Npm@1
            displayName: Analyze Build
            inputs:
              workingDir: FrontEnd/frontEnd/
              command: custom
              customCommand: run build -- --prod
          - task: Npm@1
            displayName: Analyze Tests
            inputs:
              workingDir: FrontEnd/frontEnd/
              command: custom
              customCommand: run test-hl -- --code-coverage
          - task: PublishCodeCoverageResults@1
            displayName: Publish Code Coverage
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: FrontEnd/frontEnd/coverage/cobertura-coverage.xml
              reportDirectory: FrontEnd/frontEnd/coverage
              failIfCoverageEmpty: true
          - task: SonarCloudAnalyze@1
            displayName: Run Code Analysis
          - task: SonarCloudPublish@1
            displayName: Publish Code Analysis
  - stage: deploy
    displayName: Deploy
    jobs:
      - job: publish
        steps:
          - task: Npm@1
            displayName: Install Dependencies
            inputs:
              workingDir: FrontEnd/frontEnd/
              command: install
          - task: Npm@1
            displayName: Build For Production
            inputs:
              workingDir: FrontEnd/frontEnd/
              command: custom
              customCommand: run build -- --prod
          - task: ArchiveFiles@2
            displayName: Create Archive
            inputs:
              rootFolderOrFile: FrontEnd/frontEnd/dist
              includeRootFolder: true
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true
          - task: PublishBuildArtifacts@1
            displayName: Publish Archive
            inputs:
              PathtoPublish: $(Build.ArtifactStagingDirectory)
              ArtifactName: something
              publishLocation: Container
          - task: AzureRmWebAppDeployment@4
            displayName: Azure Web App
            inputs:
              ConnectionType: AzureRM
              azureSubscription: azure-srv-2
              appType: webApp
              WebAppName: magic-match
              packageForLinux: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
          - task: AzureAppServiceManage@0
            displayName: Start Application
            inputs:
              azureSubscription: azure-srv-2
              Action: Start Azure App Service
              WebAppName: magic-match
