// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryLayer;

namespace RepositoryLayer.Migrations
{
    [DbContext(typeof(GameContext))]
    [Migration("20210129053136_testBooster")]
    partial class testBooster
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("ModelLayer.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("CollectionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("attackNumber")
                        .HasColumnType("int");

                    b.Property<string>("cardClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cardId")
                        .HasColumnType("int");

                    b.Property<string>("cardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("defenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("imageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("inDeck")
                        .HasColumnType("bit");

                    b.Property<int>("qty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("cards");
                });

            modelBuilder.Entity("ModelLayer.Collection", b =>
                {
                    b.Property<Guid>("collectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("collectionHolder")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("collectionId");

                    b.ToTable("collections");
                });

            modelBuilder.Entity("ModelLayer.Match", b =>
                {
                    b.Property<int>("matchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("player1PairPicked")
                        .HasColumnType("int");

                    b.Property<Guid?>("player1playerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("player2PairPicked")
                        .HasColumnType("int");

                    b.Property<Guid?>("player2playerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("matchId");

                    b.HasIndex("player1playerId");

                    b.HasIndex("player2playerId");

                    b.ToTable("matches");
                });

            modelBuilder.Entity("ModelLayer.Models.TodoItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Secret")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("ModelLayer.PairMatch", b =>
                {
                    b.Property<int>("pairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("cardId")
                        .HasColumnType("int");

                    b.Property<int>("matchId")
                        .HasColumnType("int");

                    b.Property<Guid?>("playerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("pairId");

                    b.HasIndex("playerId");

                    b.ToTable("pairs");
                });

            modelBuilder.Entity("ModelLayer.Player", b =>
                {
                    b.Property<Guid>("playerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Tokens")
                        .HasColumnType("int");

                    b.Property<Guid?>("collectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("login")
                        .HasColumnType("bit");

                    b.Property<int>("losses")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("wins")
                        .HasColumnType("int");

                    b.HasKey("playerId");

                    b.HasIndex("collectionId");

                    b.ToTable("players");
                });

            modelBuilder.Entity("ModelLayer.Trade", b =>
                {
                    b.Property<int>("tradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("acceptPlayerCardOffer")
                        .HasColumnType("int");

                    b.Property<Guid?>("acceptPlayerplayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<int>("postPlayerCardOffer")
                        .HasColumnType("int");

                    b.Property<Guid?>("postPlayerplayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("tradeId");

                    b.HasIndex("acceptPlayerplayerId");

                    b.HasIndex("postPlayerplayerId");

                    b.ToTable("trades");
                });

            modelBuilder.Entity("ModelLayer.Match", b =>
                {
                    b.HasOne("ModelLayer.Player", "player1")
                        .WithMany()
                        .HasForeignKey("player1playerId");

                    b.HasOne("ModelLayer.Player", "player2")
                        .WithMany()
                        .HasForeignKey("player2playerId");

                    b.Navigation("player1");

                    b.Navigation("player2");
                });

            modelBuilder.Entity("ModelLayer.PairMatch", b =>
                {
                    b.HasOne("ModelLayer.Player", "player")
                        .WithMany()
                        .HasForeignKey("playerId");

                    b.Navigation("player");
                });

            modelBuilder.Entity("ModelLayer.Player", b =>
                {
                    b.HasOne("ModelLayer.Collection", "Collection")
                        .WithMany()
                        .HasForeignKey("collectionId");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("ModelLayer.Trade", b =>
                {
                    b.HasOne("ModelLayer.Player", "acceptPlayer")
                        .WithMany()
                        .HasForeignKey("acceptPlayerplayerId");

                    b.HasOne("ModelLayer.Player", "postPlayer")
                        .WithMany()
                        .HasForeignKey("postPlayerplayerId");

                    b.Navigation("acceptPlayer");

                    b.Navigation("postPlayer");
                });
#pragma warning restore 612, 618
        }
    }
}
